{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","ETH","window","ethereum","CONTRACT_ADDRESS","OPENSEA_LINK","NoMetaMask","WrongNetwork","className","NotConnected","connect","onClick","MintClient","api","mint","count","useState","busy","setBusy","url","setUrl","remaining","setRemaining","starting","cardinality","availability","a","undefined","tokenId","useEffect","then","minted","disabled","target","rel","href","App","status","setStatus","able","authorized","network","checkConnection","request","method","length","chain","console","error","useMemo","signer","ethers","providers","Web3Provider","getSigner","contract","Contract","MyEpicNFT","abi","makeAnEpicNFT","txn","wait","receipt","events","emitted","event","args","toNumber","getMintedCount","on","removeListener","alt","src","twitterLogo","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.74538bdb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","import './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport React, { useEffect, useState, useMemo } from \"react\";\nimport { ethers } from \"ethers\";\nimport MyEpicNFT from \"./MyEpicNFT.json\";\n\n\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst TOTAL_MINT_COUNT = 50;\nconst ETH = window.ethereum;\nconst RINKEBY_ID = \"0x4\";\nconst CONTRACT_ADDRESS = \"0x6b83553fbf4D05ee24d3815Bf2B2eBC4c28f8F0D\";\nconst OPENSEA_LINK = `https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/`;\n\n\nfunction App() {\n  const [status, setStatus] = useState([]);\n  const [able, authorized, network] = status;\n\n  async function checkConnection() {\n    if (!ETH) {\n      setStatus([false]);\n      return;\n    }\n    let accounts = await ETH.request({ method: \"eth_accounts\" });\n    if (!accounts.length) {\n      setStatus([true, false]);\n    }\n    else {\n      let chain = await ETH.request({ method: \"eth_chainId\" });\n      setStatus([true, true, chain]);\n    }\n  }\n\n  async function connect() {\n    if (able && !authorized) {\n      try {\n        await ETH.request({ method: \"eth_requestAccounts\" });\n        let chain = await ETH.request({ method: \"eth_chainId\" });\n        setStatus([true, true, chain]);\n      }\n      catch (e) {\n        console.error(e);\n      }\n    }\n  }\n\n  const api = useMemo(() => {\n    if (!able || !authorized || network !== RINKEBY_ID) {\n      return null;\n    }\n    const provider = new ethers.providers.Web3Provider(ETH);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(CONTRACT_ADDRESS, MyEpicNFT.abi, signer);\n    return {\n      async mint() {\n        try {\n          let txn = await contract.makeAnEpicNFT();\n          let receipt = await txn.wait();\n          for (let emitted of receipt.events) {\n            if (emitted.event === \"NewEpicNFTMinted\") {\n              return emitted.args.tokenId.toNumber();\n            }\n          }\n        }\n        catch (e) {\n          console.error(e);\n        }\n      },\n\n      async count() {\n        try {\n          return await contract.getMintedCount();\n        }\n        catch (e) {\n          console.error(e);\n          return 0;\n        }\n      },\n    };\n  }, [able, authorized, network]);\n\n  useEffect(() => {\n    checkConnection();\n    if (ETH) {\n      ETH.on(\"chainChanged\", checkConnection);\n      return () => ETH.removeListener(\"chainChanged\", checkConnection);\n    }\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My NFT Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          {!status.length ? null : !able ? (\n            <NoMetaMask />\n          ) : !authorized ? (\n            <NotConnected connect={connect} />\n          ) : network !== RINKEBY_ID ? (\n            <WrongNetwork />\n          ) : (\n            <MintClient api={api} />\n          )}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            built on @{TWITTER_HANDLE}\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n\nfunction NoMetaMask() {\n  return (\n    <h4>Please install <strong>MetaMask</strong> to proceed</h4>\n  );\n}\n\n\nfunction WrongNetwork() {\n  return (\n    <section className=\"sub-text\">\n      <h1>⚠️ Wrong network!</h1>\n      <p>Please switch to the <strong>Rinkeby</strong> testnet to proceed</p>\n    </section>\n  );\n}\n\n\nfunction NotConnected({ connect }) {\n  return (\n    <button className=\"cta-button connect-wallet-button\" onClick={connect}>\n      Connect to Wallet\n    </button>\n  );\n}\n\n\nfunction MintClient({ api: { mint, count } }) {\n  const [busy, setBusy] = useState(false);\n  const [url, setUrl] = useState();\n  const [remaining, setRemaining] = useState(-1);\n  const starting = remaining === -1;\n  const cardinality = remaining === 1 ? \"token\" : \"tokens\";\n  const availability = remaining < 10 ?\n    `Only ${remaining} ${cardinality} left!` :\n    `${remaining} ${cardinality} left`;\n\n  async function action() {\n    setBusy(true);\n    let tokenId = await mint();\n    if (tokenId !== undefined) {\n      setRemaining(remaining - 1);\n      setUrl(OPENSEA_LINK + tokenId);\n    }\n    else {\n      setUrl(undefined);\n    }\n    setBusy(false);\n  }\n\n  useEffect(() => {\n    if (starting) {\n      count().then((minted) => setRemaining(TOTAL_MINT_COUNT - minted));\n    }\n  }, [starting, count]);\n\n  return (\n    <>\n      <button\n        onClick={action}\n        className=\"cta-button connect-wallet-button\"\n        disabled={busy || remaining < 1}\n      >\n        {busy ? \"Minting...\" : \"Mint NFT\"}\n      </button>\n      {remaining > 0 ? (\n        <section className=\"lead\">\n          <h1>Hurry while supplies last!</h1>\n          <p>{availability}</p>\n        </section>\n      ) : remaining === 0 ? (\n        <h1 className=\"lead\">We ran out of tokens! Sorry!</h1>\n      ) : null}\n      {url ? (\n        <section className=\"result\">\n          <h1>NFT Minted!</h1>\n          <p>\n            Check it out at <a target=\"_blank\" rel=\"noopener noreferrer\" href={url}>OpenSea</a>.\n          </p>\n        </section>\n      ) : null}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}