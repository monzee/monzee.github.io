{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","ETH","window","ethereum","CONTRACT_ADDRESS","OPENSEA_LINK","NoMetaMask","WrongNetwork","className","NotConnected","connect","onClick","MintClient","api","useState","busy","setBusy","url","setUrl","remaining","setRemaining","starting","units","availability","a","mint","tokenId","undefined","useEffect","count","then","minted","onNewMint","n","disabled","target","rel","href","App","state","setState","able","authorized","network","checkConnection","request","method","length","chain","console","error","useMemo","signer","ethers","providers","Web3Provider","getSigner","contract","Contract","MyEpicNFT","abi","makeAnEpicNFT","txn","wait","receipt","events","event","args","toNumber","code","getMintedCount","accept","on","removeListener","alt","src","twitterLogo","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cfa1b80a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","import './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport React, { useEffect, useState, useMemo } from \"react\";\nimport { ethers } from \"ethers\";\nimport MyEpicNFT from \"./MyEpicNFT.json\";\n\n\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst TOTAL_MINT_COUNT = 50;\nconst ETH = window.ethereum;\nconst RINKEBY_ID = \"0x4\";\nconst USER_DENIED = 4001;\nconst CONTRACT_ADDRESS = \"0x6b83553fbf4D05ee24d3815Bf2B2eBC4c28f8F0D\";\nconst OPENSEA_LINK = `https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/`;\n\n\nfunction App() {\n  const [state, setState] = useState([]);\n  const [able, authorized, network] = state;\n\n  async function checkConnection() {\n    if (!ETH) {\n      setState([false]);\n      return;\n    }\n    let accounts = await ETH.request({ method: \"eth_accounts\" });\n    if (!accounts.length) {\n      setState([true, false]);\n    }\n    else {\n      let chain = await ETH.request({ method: \"eth_chainId\" });\n      setState([true, true, chain]);\n    }\n  }\n\n  async function connect() {\n    if (able && !authorized) {\n      try {\n        await ETH.request({ method: \"eth_requestAccounts\" });\n        let chain = await ETH.request({ method: \"eth_chainId\" });\n        setState([true, true, chain]);\n      }\n      catch (e) {\n        console.error(e);\n      }\n    }\n  }\n\n  const api = useMemo(() => {\n    if (!able || !authorized || network !== RINKEBY_ID) {\n      return null;\n    }\n    const provider = new ethers.providers.Web3Provider(ETH);\n    const signer = provider.getSigner();\n    const contract = new ethers.Contract(CONTRACT_ADDRESS, MyEpicNFT.abi, signer);\n    return {\n      async mint() {\n        try {\n          let txn = await contract.makeAnEpicNFT();\n          let receipt = await txn.wait();\n          for (let { event, args } of receipt.events) {\n            if (event === \"NewEpicNFTMinted\") {\n              return args.tokenId.toNumber();\n            }\n          }\n        }\n        catch (e) {\n          console.error(e);\n          if (e.code !== USER_DENIED) {\n            checkConnection();\n          }\n        }\n      },\n\n      async count() {\n        try {\n          return await contract.getMintedCount();\n        }\n        catch (e) {\n          console.error(e);\n          checkConnection();\n          return 0;\n        }\n      },\n\n      onNewMint(accept) {\n        contract.on(\"NewEpicNFTMinted\", accept);\n        return () => contract.removeListener(\"NewEpicNFTMinted\", accept);\n      },\n    };\n  }, [able, authorized, network]);\n\n  useEffect(() => {\n    checkConnection();\n    if (ETH) {\n      ETH.on(\"chainChanged\", checkConnection);\n      return () => ETH.removeListener(\"chainChanged\", checkConnection);\n    }\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My NFT Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          {!state.length ? null : !able ? (\n            <NoMetaMask />\n          ) : !authorized ? (\n            <NotConnected connect={connect} />\n          ) : network !== RINKEBY_ID ? (\n            <WrongNetwork />\n          ) : (\n            <MintClient api={api} />\n          )}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            built on @{TWITTER_HANDLE}\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n\nfunction NoMetaMask() {\n  return (\n    <h4>Please install <strong>MetaMask</strong> to proceed</h4>\n  );\n}\n\n\nfunction WrongNetwork() {\n  return (\n    <section className=\"sub-text\">\n      <h1>⚠️ Wrong network!</h1>\n      <p>Please switch to the <strong>Rinkeby</strong> testnet to proceed</p>\n    </section>\n  );\n}\n\n\nfunction NotConnected({ connect }) {\n  return (\n    <button className=\"cta-button connect-wallet-button\" onClick={connect}>\n      Connect to Wallet\n    </button>\n  );\n}\n\n\nfunction MintClient({ api }) {\n  const [busy, setBusy] = useState(false);\n  const [url, setUrl] = useState();\n  const [remaining, setRemaining] = useState(-1);\n  const starting = remaining === -1;\n  const units = remaining === 1 ? \"token\" : \"tokens\";\n  const availability = remaining < 10 ?\n    `Only ${remaining} ${units} left!` :\n    `${remaining} ${units} left`;\n\n  async function action() {\n    setBusy(true);\n    let tokenId = await api.mint();\n    setUrl(tokenId === undefined ? undefined : (OPENSEA_LINK + tokenId));\n    setBusy(false);\n  }\n\n  useEffect(() => {\n    if (starting) {\n      api.count().then((minted) => setRemaining(TOTAL_MINT_COUNT - minted));\n    }\n    return api.onNewMint(() => setRemaining((n) => n - 1));\n  }, [starting, api]);\n\n  return (\n    <>\n      <button\n        onClick={action}\n        className=\"cta-button connect-wallet-button\"\n        disabled={busy || remaining < 1}\n      >\n        {busy ? \"Minting...\" : \"Mint NFT\"}\n      </button>\n      {remaining > 0 ? (\n        <section className=\"lead\">\n          <h1>Hurry while supplies last!</h1>\n          <p>{availability}</p>\n        </section>\n      ) : remaining === 0 ? (\n        <h1 className=\"lead\">We ran out of tokens! Sorry!</h1>\n      ) : null}\n      {url ? (\n        <section className=\"result\">\n          <h1>NFT Minted!</h1>\n          <p>\n            Check it out at <a target=\"_blank\" rel=\"noopener noreferrer\" href={url}>OpenSea</a>.\n          </p>\n        </section>\n      ) : null}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}