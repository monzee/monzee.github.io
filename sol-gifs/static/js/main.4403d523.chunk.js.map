{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","SystemProgram","web3","BASE_ACCOUNT","Keypair","fromSeed","Uint8Array","seed","PROGRAM_ID","PublicKey","idl","metadata","address","connect","sol","onlyIfTrusted","a","isPhantom","res","console","info","publicKey","toString","code","Client","api","useState","gifs","setGifs","url","trimmedUrl","trim","error","push","useEffect","pull","then","useClientModel","images","sendGif","newUrl","setNewUrl","className","onSubmit","ev","preventDefault","type","placeholder","value","onChange","target","map","i","src","alt","App","network","preflightCommitment","state","setState","window","addEventListener","once","useMemo","conn","Connection","clusterApiUrl","provider","Provider","program","Program","init","rpc","startStuffOff","accounts","baseAccount","user","wallet","systemProgram","programId","signers","account","fetch","acct","gifList","e","gifLink","message","startsWith","addGif","useAppModel","solana","status","authorize","onClick","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4403d523.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import { useEffect, useMemo, useState } from \"react\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\nimport idl from \"./idl.json\";\nimport seed from \"./base-account-seed.json\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport \"./App.css\";\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst DENIED = 4001;\nconst TEST_GIFS = [\n  'https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp',\n  'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g',\n  'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g',\n  'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp'\n];\n\nconst { SystemProgram, Keypair } = web3;\nconst BASE_ACCOUNT = Keypair.fromSeed(new Uint8Array(seed));\nconst PROGRAM_ID = new PublicKey(idl.metadata.address);\n\nasync function connect(sol, onlyIfTrusted) {\n  if (!sol || !sol.isPhantom) {\n    return [\"incapable\"];\n  }\n  try {\n    let res = await sol.connect({ onlyIfTrusted });\n    console.info(res.publicKey + '');\n    return [\"authorized\", res.publicKey.toString()];\n  }\n  catch (err) {\n    return [err.code === DENIED ? \"denied\" : \"caught\", err];\n  }\n}\n\nfunction useAppModel(sol, {\n  network = \"devnet\",\n  preflightCommitment = \"processed\",\n} = {}) {\n  const [state, setState] = useState(!sol ? [\"incapable\"] : [\"unknown\"]);\n\n  useEffect(() => {\n    window.addEventListener(\"load\", async () => {\n      setState(await connect(sol, true));\n    }, { once: true });\n  }, [sol]);\n\n  const api = useMemo(() => {\n    if (state[0] !== \"authorized\") {\n      return null;\n    }\n\n    let conn = new Connection(clusterApiUrl(network), preflightCommitment);\n    let provider = new Provider(conn, sol, preflightCommitment);\n    const program = new Program(idl, PROGRAM_ID, provider);\n\n    async function init() {\n      try {\n        await program.rpc.startStuffOff({\n          accounts: {\n            baseAccount: BASE_ACCOUNT.publicKey,\n            user: provider.wallet.publicKey,\n            systemProgram: SystemProgram.programId,\n          },\n          signers: [BASE_ACCOUNT],\n        });\n        console.info(\"created base account. addr:\", BASE_ACCOUNT.publicKey.toString());\n      }\n      catch (e) {\n        console.error(e);\n      }\n    }\n\n    return {\n      publicKey: state[1],\n\n      async pull() {\n        while (true) {\n          try {\n            let acct = await program.account.baseAccount.fetch(BASE_ACCOUNT.publicKey);\n            console.info(\"account:\", acct);\n            return acct.gifList.map((e) => e.gifLink);\n          }\n          catch (e) {\n            if (e.message && e.message.startsWith(\"Account does not exist\")) {\n              await init();\n              continue;\n            }\n            console.error(e);\n            return [];\n          }\n        }\n      },\n\n      async push(url) {\n        try {\n          await program.rpc.addGif(url, {\n            accounts: {\n              baseAccount: BASE_ACCOUNT.publicKey,\n              user: provider.wallet.publicKey,\n            },\n          });\n          console.info(\"added gif\", url);\n        }\n        catch (e) {\n          console.error(e);\n        }\n      },\n    };\n  }, [state, sol, network, preflightCommitment]);\n\n  return [state[0], () => connect(sol, false).then(setState), api];\n}\n\nconst App = () => {\n  const [status, authorize, api] = useAppModel(window.solana);\n  return (\n    <div className=\"App\">\n      <div className={status === \"authorized\" ? \"authed-container\" : \"container\"}>\n        <div className=\"header-container\">\n          <p className=\"header\">ðŸ–¼ GIF Portal</p>\n          <p className=\"sub-text\">\n            View your GIF collection in the metaverse âœ¨\n          </p>\n          {status === \"incapable\" ? (\n            <>\n              <h1>No solana provider found!</h1>\n              <p>Install Phantom to proceed</p>\n            </>\n          ) : status !== \"authorized\" ? (\n            <button\n              className=\"cta-button connect-wallet-button\"\n              onClick={authorize}\n            >Connect wallet</button>\n          ) : (\n            <Client api={api} />\n          )}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >built on @{TWITTER_HANDLE}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction useClientModel(api) {\n  const [gifs, setGifs] = useState([]);\n\n  async function sendGif(url) {\n    let trimmedUrl;\n    if (!url || !(trimmedUrl = url.trim())) {\n      console.error(\"empty gif url!\");\n      return;\n    }\n    console.info(\"gif url =\", trimmedUrl);\n    await api.push(trimmedUrl);\n    setGifs([...gifs, trimmedUrl]);\n  }\n\n  useEffect(() => {\n    console.info(\"initial fetch\");\n    api.pull().then(setGifs);\n  }, [api]);\n\n  return [gifs, sendGif];\n}\n\nconst Client = ({ api }) => {\n  const [images, sendGif] = useClientModel(api);\n  const [newUrl, setNewUrl] = useState(\"\");\n\n  function submit(ev) {\n    ev.preventDefault();\n    sendGif(newUrl);\n  }\n\n  function change({ target }) {\n    setNewUrl(target.value || \"\");\n  }\n\n  return (\n    <div className=\"connected-container\">\n      <form onSubmit={submit}>\n        <input type=\"text\" placeholder=\"Gif url\" value={newUrl} onChange={change} />\n        <button type=\"submit\" className=\"cta-button submit-gif-button\">\n          Submit\n        </button>\n      </form>\n      <div className=\"gif-grid\">\n        {images.map((url, i) => (\n          <div className=\"gif-item\" key={i}>\n            <img src={url} alt=\"a user-submitted animation\" />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}